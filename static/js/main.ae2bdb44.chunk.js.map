{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","nameOfTheRecipe","imageOfTheRecipe","videoURL","ingredientLines","style","display","flexDirection","flexWrap","justifyContent","Card","width","margin","Img","variant","src","Body","Title","Text","map","ingredient","Button","href","target","App","useState","recipies","setRecipies","search","setSearch","query","setQuery","useEffect","getRecipies","a","fetch","response","json","data","hits","Navbar","collapseOnSelect","expand","bg","sticky","Brand","Container","paddingTop","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","onChange","event","value","Append","onClick","preventDefault","recipe","key","label","image","url","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAuBeA,MApBf,YAAmF,IAAjEC,EAAgE,EAAhEA,gBAAiBC,EAA+C,EAA/CA,iBAAkBC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBAC3D,OACI,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,SAAUC,SAAU,OAAQC,eAAgB,WACtF,kBAACC,EAAA,EAAD,CAAML,MAAO,CAAEM,MAAO,QAAUC,OAAQ,SACpC,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKb,IAC7B,kBAACQ,EAAA,EAAKM,KAAN,KACI,kBAACN,EAAA,EAAKO,MAAN,KAAahB,GACb,kBAACS,EAAA,EAAKQ,KAAN,mBAEKd,EAAgBe,KAAK,SAAAC,GAAU,OAC5B,4BAAKA,OAGb,kBAACC,EAAA,EAAD,CAAQP,QAAQ,UAAUQ,KAAMnB,EAAUoB,OAAO,SAAjD,mB,wCCuDLC,EAlEH,WAEV,IAFgB,EAKgBC,mBAAS,IALzB,mBAKTC,EALS,KAKCC,EALD,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,SAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAW,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUI,cACZM,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBX,EAAYW,EAAKC,MAHC,2CAAH,qDAejB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,UAAU7B,QAAQ,OAAO8B,OAAO,OACtE,kBAACJ,EAAA,EAAOK,MAAR,CAAcvB,KAAK,SAAnB,eAEF,kBAACwB,EAAA,EAAD,CAAWzC,MAAO,CAAEC,QAAS,OAAQG,eAAgB,SAAUsC,WAAY,SACzE,kBAACC,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACC,EAAA,EAAD,CACEC,YAAY,2BACZC,aAAW,uBACXC,mBAAiB,eACjBC,SApBW,SAAAC,GACnB1B,EAAU0B,EAAMhC,OAAOiC,UAsBjB,kBAACR,EAAA,EAAWS,OAAZ,KACC7B,GAAU,kBAACP,EAAA,EAAD,CAAQP,QAAQ,kBAAkB4C,QApBnC,SAAAH,GAChBA,EAAMI,iBACN5B,EAASH,GACTC,EAAU,MAiBO,aAMf,yBAAKxB,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOC,SAAU,OAAQC,eAAgB,WACpFiB,EAASP,KAAI,SAAAyC,GAAM,OAClB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOE,MACnB7D,gBAAiB2D,EAAOA,OAAOE,MAC/B5D,iBAAkB0D,EAAOA,OAAOG,MAChC5D,SAAUyD,EAAOA,OAAOI,IACxB5D,gBAAiBwD,EAAOA,OAAOxD,qBAEd,IAApBsB,EAASuC,QAAgB,2DCnDdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae2bdb44.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, Button } from 'react-bootstrap';\r\n\r\nfunction Recipe({ nameOfTheRecipe, imageOfTheRecipe, videoURL, ingredientLines }) {\r\n    return (\r\n        <div style={{ display: 'flex', flexDirection: 'column', flexWrap: 'wrap', justifyContent: 'center' }}>\r\n            <Card style={{ width: '18rem' , margin: '30px' }}>\r\n                <Card.Img variant=\"top\" src={imageOfTheRecipe} />\r\n                <Card.Body>\r\n                    <Card.Title>{nameOfTheRecipe}</Card.Title>\r\n                    <Card.Text>\r\n                        Ingredients\r\n                        {ingredientLines.map( ingredient => (\r\n                            <li>{ingredient}</li>\r\n                        ))}\r\n                    </Card.Text>\r\n                    <Button variant=\"success\" href={videoURL} target=\"blank\">How To Make</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe\r\n","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Container, InputGroup, FormControl, Button } from 'react-bootstrap';\n\nconst App = () => {\n\n  const APP_ID = \"96300403\";\n  const APP_KEY = \"7432cb0ab890b3b024d7a149647615a7\";\n\n  const [recipies, setRecipies] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chips\");\n\n  useEffect(() => {\n    getRecipies();\n  }, [query]);\n\n  const getRecipies = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipies(data.hits);\n  }\n\n  const updateSearch = event => {\n    setSearch(event.target.value);\n  }\n\n  const getSearch = event => {\n    event.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n  return (\n    <div>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"warning\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand href=\"#home\">Food Sense</Navbar.Brand>\n      </Navbar>\n      <Container style={{ display: 'flex', justifyContent: 'center', paddingTop: '30px' }}>\n        <InputGroup className=\"mb-3\">\n          <FormControl\n            placeholder=\"What do you like to eat?\"\n            aria-label=\"Recipient's username\"\n            aria-describedby=\"basic-addon2\"\n            onChange={updateSearch}\n            // value={search}\n          />\n          <InputGroup.Append>\n          {search && <Button variant=\"outline-primary\" onClick={getSearch}>Button</Button>}\n            {/* <Button variant=\"outline-primary\" onClick={getSearch}>Button</Button> */}\n          </InputGroup.Append>\n        </InputGroup>\n\n      </Container>\n      <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'center' }}>\n        {recipies.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            nameOfTheRecipe={recipe.recipe.label}\n            imageOfTheRecipe={recipe.recipe.image}\n            videoURL={recipe.recipe.url}\n            ingredientLines={recipe.recipe.ingredientLines} />\n        ))}\n        {recipies.length === 0 && <h3>\n          Nothing to Show. Sorry !\n        </h3>}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}